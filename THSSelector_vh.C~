#define THSSelector_vh_cxx
// The class definition in THSSelector_vh.h has been generated automatically
// by the ROOT utility TTree::MakeSelector(). This class is derived
// from the ROOT class TSelector. For more information on the TSelector
// framework see $ROOTSYS/README/README.SELECTOR or the ROOT User Manual.


// The following methods are defined in this file:
//    Begin():        called every time a loop on the tree starts,
//                    a convenient place to create your histograms.
//    SlaveBegin():   called after Begin(), when on PROOF called only on the
//                    slave servers.
//    Process():      called for each event, in this function you decide what
//                    to read and fill your histograms.
//    SlaveTerminate: called at the end of the loop on the tree, when on PROOF
//                    called only on the slave servers.
//    Terminate():    called at the end of the loop on the tree,
//                    a convenient place to draw/fit your histograms.
//
// To use this file, try the following session on your Tree T:
//
// root> T->Process("THSSelector_vh.C")
// root> T->Process("THSSelector_vh.C","some options")
// root> T->Process("THSSelector_vh.C+")
//


#include "THSSelector_vh.h"
#include <TH2.h>
#include <TStyle.h>

void THSSelector_vh::Begin(TTree * /*tree*/)
{
   THSOutput::HSBegin(fInput,fOutput);
   // The Begin() function is called at the start of the query.
   // When running with PROOF Begin() is only called on the client.
   // The tree argument is deprecated (on PROOF 0 is passed).

   TString option = GetOption();
//If you want to split histograms into different kinematic bins, include and configure the lines below
   fBins=new THSBins("HSBins");
   fBins->AddAxis("W",10,950,1850);
   fBins->AddAxis("Costh",10,-1,1);
   fBins->AddAxis("Pol",2,-1,1);
   if(!fInput) fInput=new TList();
   fInput->Add(fBins);
}

void THSSelector_vh::SlaveBegin(TTree * /*tree*/)
{
   // The SlaveBegin() function is called after the Begin() function.
   // When running with PROOF SlaveBegin() is called on each slave server.
   // The tree argument is deprecated (on PROOF 0 is passed).

   TString option = GetOption();  //What does this line do???
   THSOutput::HSSlaveBegin(fInput,fOutput);
   //Get weights from file
//   THSHisto::LoadWeights("WEIGHTFILE_DIR+NAME","WEIGHTNAME");
   THSHisto::LoadWeights("/w/work1/home/chris/LatestAnalysisRuns/Data/DataJul17/HaspectOutput/Fitting/DualFitProtonTiming10Bins1Files/SFTweights.root","HSsWeights");
  //Initialise the ouput tree
   //Only done once. THSOutput::FinishOutput Resets the tree before new files
   //If you want to save additional branches to a new file, do it here
   //If you are creating a HSParticle tree via fStrParticles then do not create a new tree here, just add the extra branches
   fOutTree=new TTree("HSParticles","A tree containing reconstructed particles"); 
  //e.g. Make some objects to make branch with, these should be declared in the .h file 
  //e.g. fp1=new TLorentzVector();
  //e.g.  fOutTree->Branch("p1",&fp1,buff,split);
  //Initialise and configure histogramming
   THSHisto::InitialiseHisto(fInput);
   //Load histograms for each species that has a weight
   THSHisto::LoadCutsForWeights(); //Loop over weights species and make weighted histograms for each
   THSHisto::LoadCut("Cut1");
   THSHisto::LoadHistograms();


}

Bool_t THSSelector_vh::Process(Long64_t entry)
{
   // The Process() function is called for each entry in the tree (or possibly
   // keyed object in the case of PROOF) to be processed. The entry argument
   // specifies which entry in the currently loaded tree is to be processed.
   // When processing keyed objects with PROOF, the object is already loaded
   // and is available via the fObject pointer.
   //
   // This function should contain the \"body\" of the analysis. It can contain
   // simple or elaborate selection criteria, run algorithms on the data
   // of the event and typically fill histograms.
   //
   // The processing can be stopped by calling Abort().
   //
   // Use fStatus to set the return value of TTree::Process().
   //
   // The return value is currently not used.

   fReader.SetLocalEntry(entry);
   THSOutput::HSProcessStart(entry);
 //below you can give vars corresponding to fBins axis
   fWeight=1; //For unweighted histograms
   //if(fBins) fCurrBin=fBins->FindBin(var1,var2,...);//if fBins is defined need to give this meaningful arguments
   if(fBins) fCurrBin=fBins->FindBin(*W,*Costh,*Pol);
   FillHistograms("Cut1");
   THSHisto::GetWeightEvent(fgID); //get weights for this event, use fgID as works when permutating also
   THSHisto::FillCutsForWeights(); //Fill weighted hists
   THSOutput::HSProcessFill();
   return kTRUE;
}

void THSSelector_vh::SlaveTerminate()
{
   THSOutput::HSSlaveTerminate();
   // The SlaveTerminate() function is called after all entries or objects
   // have been processed. When running with PROOF SlaveTerminate() is called
   // on each slave server.

}

void THSSelector_vh::Terminate()
{
   THSOutput::HSTerminate();
   // The Terminate() function is the last function to be called during
   // a query. It always runs on the client, it can be used to present
   // the results graphically or save the results to file.


	

}
 
void THSSelector_vh::HistogramList(TString sLabel){
  TDirectory::AddDirectory(kFALSE); //do not add to current directory
  //now define all histograms and add to Output
  //label includes kinematic bin and additional cut name
  // e.g fOutput->Add(MapHist(new TH1F("Mp1","M_{p1}",100,0,2)));
  fOutput->Add(MapHist(new TH1F("MissMass","M_{miss}",100,0,4000)));
  fOutput->Add(MapHist(new TH1F("Phi","Phi",100,-180,180)));
  fOutput->Add(MapHist(new TH1F("Timing","Timing",100,-100,0)));
  fOutput->Add(MapHist(new TH1F("Coplanarity","Coplanarity",100,-180,180)));
  fOutput->Add(MapHist(new TH1F("InvMass","InvMass_{Pi0}",100,0,300)));
  fOutput->Add(MapHist(new TH1F("SpectatorMomentum","SpectatorMomentum",100,0,400)));
  fOutput->Add(MapHist(new TH1F("ConeAngle","ConeAngle",100,0,3.2)));
  fOutput->Add(MapHist(new TH1F("Polarisation","Polarisation",100,-1.1,1.1)));
  fOutput->Add(MapHist(new TH1F("W","W",100,950,2300)));

  //end of histogram list
  //ParticleList("NAME"); //Create standard histograms for a THSParticle
  TDirectory::AddDirectory(kTRUE); //back to normal
}
void THSSelector_vh::FillHistograms(TString sCut){
  if(fBins&&fCurrBin==-1) return; //Outwith bin limits so no hists
  fCurrCut=sCut;
  //Get histogram from list
  //Fill histogram
  FindHist("MissMass")->Fill(*MissMass);//1D
  FindHist("Phi")->Fill(*Phi);//1D
  FindHist("Timing")->Fill(*GammaAveTagDiffTime);//1D
  FindHist("Coplanarity")->Fill(*Coplanarity);//1D
  FindHist("InvMass")->Fill(*InvMass);//1D
  FindHist("SpectatorMomentum")->Fill(*SpecMom);//1D
  FindHist("ConeAngle")->Fill(*ConeAngle);//1D
  FindHist("Polarisation")->Fill(*Pol);//1D
  FindHist("W")->Fill(*W);//1D


  //Find and fill weighted hist below here
  //e.g. FindHist("Mp1")->Fill(fp1->M(),fWeight);
  //e.g. ((TH2F*)FindHist("Mp1VMmiss"))->Fill(fp1->M(),Mmiss,fWeight);
  //Fill THSParticle histogram with values from THSParticle PART
  //FillParticles("NAME",&PART);
}
